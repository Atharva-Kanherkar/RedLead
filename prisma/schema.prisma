// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Core Models ---

model User {
  id    String @id @default(cuid())
  email String @unique

  // User's subscription and plan details
  plan               String    @default("free")
  subscriptionStatus String?

  // Reddit-specific authentication and data
  // SECURITY: The refreshToken should be encrypted at the application level before being stored.
  redditUsername     String?
  redditRefreshToken String?   @db.Text
  redditKarma        Int?      @default(0)
  lastKarmaCheck     DateTime?

  // --- Relations ---
  campaigns        Campaign[]
  leads            Lead[]
  scheduledReplies ScheduledReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  webhooks            Webhook[]

  MarketInsight MarketInsight[]

  AIUsage AIUsage[]
}
model Webhook {
  id               String   @id @default(cuid())
  name             String
  url              String
  type             String   // 'discord', 'slack', 'generic', 'email', 'sms'
  isActive         Boolean  @default(true)
  events           String[] // Array of event names
  userId           String
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())
  lastTriggered    DateTime?
  lastSentAt       DateTime?
  
  // Business features
  filters          Json?    // { minOpportunityScore, subreddits, keywords, priority }
  rateLimitMinutes Int?     // Rate limiting in minutes
  
  @@map("webhooks")
}
 // prisma/schema.prisma

// prisma/schema.prisma

model Campaign {
  id                    String    @id @default(cuid())
  userId                String
  name                  String    @default("Untitled Campaign")
  analyzedUrl           String
  generatedKeywords     String[]
  generatedDescription  String
  targetSubreddits      String[]  @default([]) // Now used for competitor tracking and suggestions
  competitors           String[]  @default([])
  isActive              Boolean   @default(true)
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // --- NEW FIELDS FOR GLOBAL SEARCH ---
  negativeKeywords    String[]  @default([]) // Keywords to explicitly exclude
  subredditBlacklist  String[]  @default([]) // Subreddits to completely ignore

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leads                 Lead[]
  MarketInsight         MarketInsight[]

  @@index([userId])
}
model Lead {
  id        String   @id @default(cuid())
  redditId  String   @unique
  title     String   @db.Text
  author    String
  subreddit String
  url       String   @unique
  body      String?  @db.Text

  // Lead classification and scoring
  type             LeadType @default(DIRECT_LEAD)
  intent           String?
  sentiment        String?
  opportunityScore Int
  status           String   @default("new")
  summary        String?  @db.Text
  isGoogleRanked   Boolean? @default(false) // Add this new field


  // Timestamps
  postedAt     DateTime // When the original post was made on Reddit
  discoveredAt DateTime @default(now())

  // --- Relations ---
  userId           String
  user             User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId       String
  campaign         Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  scheduledReplies ScheduledReply[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
    insightAnalysisRan Boolean @default(false)


  @@index([userId])
  @@index([campaignId])
}

// --- Engagement & Automation Models ---

model ScheduledReply {
  id           String               @id @default(cuid())
  content      String               @db.Text
  status       ScheduledReplyStatus @default(PENDING)
  scheduledAt  DateTime
  postedAt     DateTime?
  failReason   String?
  redditPostId String?

  // Performance tracking for A/B testing
  upvotes       Int?     @default(0)
  authorReplied Boolean? @default(false)
  lastCheckedAt DateTime?

  // --- Relations ---
  leadId String
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([leadId])
}

// Stores pre-analyzed data about subreddits to inform engagement strategies.
model SubredditProfile {
  id   String @id @default(cuid())
  name String @unique // The name of the subreddit (e.g., "solana")

  // Data fetched and analyzed by a background worker
  rules            String[] @default([])
  cultureNotes     String?  @db.Text
  peakActivityTime String?

  lastAnalyzedAt DateTime @updatedAt
}

// --- Enums ---

enum ScheduledReplyStatus {
  PENDING
  POSTED
  FAILED
  CANCELLED
}

enum LeadType {
  DIRECT_LEAD
  COMPETITOR_MENTION
}

model MarketInsight {
  id                      String        @id @default(cuid())
  discoveredCompetitorName String
  sourceUrl               String        @db.Text
  sourceTextSnippet       String        @db.Text
  context                 String        // e.g., "Mentioned as an alternative to your product"
  status                  InsightStatus @default(NEW)

  // --- Relations ---
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  discoveredAt DateTime @default(now())

 
  @@index([campaignId])
  @@unique([campaignId, discoveredCompetitorName])
  @@index([userId])
}
model AIUsage {
    id      String @id @default(cuid())
    userId  String
    month   String // YYYY-MM format
    type    String // 'reply', 'intent', 'competitor'
    count   Int    @default(0)
    
    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@unique([userId, month, type], name: "userId_month_type")
}
 
enum InsightStatus {
  NEW
  VIEWED
  ACTIONED // e.g., user added them to the monitored list
  IGNORED
}