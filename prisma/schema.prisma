// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

 model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  // ... other user fields
  plan                String    @default("free")
  subscriptionStatus  String?
  
  // New fields for Reddit Automation
  redditUsername      String?
  redditRefreshToken  String?   @db.Text // Encrypt this field in a real production app
  redditKarma         Int?      @default(0)
  lastKarmaCheck      DateTime?

  campaigns           Campaign[]
  leads               Lead[]
  scheduledReplies    ScheduledReply[] // Add relation
}


 model Campaign {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id])
  
  analyzedUrl         String
  generatedKeywords   String[]
  generatedDescription String   @db.Text

  // --- NEW FIELD ---
  // Stores the list of subreddits recommended by the AI for this specific campaign
  targetSubreddits    String[]  @default([])

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  description        String?   @db.Text // Optional description for the campaign 
  leads               Lead[]
}

model Lead {
  id               String   @id @default(cuid())
  redditId         String   @unique
  title            String   @db.Text
  author           String
  subreddit        String
  url              String   @unique
  body             String?  @db.Text
  intent           String?
  postedAt         DateTime
  discoveredAt     DateTime @default(now())
  opportunityScore Int
  status           String   @default("new")

  // --- FIX IS HERE ---
  // We add a dedicated `userId` field to store the owner's ID
  userId           String
  // The relation now correctly uses `userId` to link to the `User`'s `id`
  user             User     @relation(fields: [userId], references: [id])
  
  scheduledReplies ScheduledReply[]

  campaignId       String
  campaign         Campaign @relation(fields: [campaignId], references: [id])
}


// This table will store pre-analyzed data about subreddits to inform
// engagement strategies and AI-powered response generation in Layer 3.
model SubredditProfile {
  id   String @id @default(cuid())
  name String @unique // The name of the subreddit (e.g., "solana")

  // Data fetched and analyzed by a background worker
  rules            String[] @default([]) // A list of the subreddit's official rules
  cultureNotes     String?  @db.Text    // AI-generated summary of the subreddit's vibe and posting style
  peakActivityTime String?  // e.g., "weekdays_afternoon_et"

  lastAnalyzedAt DateTime @updatedAt
}

model ScheduledReply {
  id          String                @id @default(cuid())
  content     String                @db.Text
  status      ScheduledReplyStatus  @default(PENDING)
  scheduledAt DateTime
  postedAt    DateTime?
  
  // The ID of the comment once posted on Reddit
  redditPostId String?

  // To store any errors during posting
  failReason  String?

  leadId      String
  lead        Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  upvotes         Int?      @default(0)
  authorReplied   Boolean?  @default(false)
  lastCheckedAt   DateTime?

  
}

// New Enum for Status
enum ScheduledReplyStatus {
  PENDING
  POSTED
  FAILED
  CANCELLED
}